include:
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  #DOCKER_TLS_VERIFY: 0

stages:
  - fetch-version
  - build
  - test
  - release

fetch-semantic-version:
  image: node:13
  stage: fetch-version
  only:
    refs:
    - master
    - alpha
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - make install-deps
    - npx semantic-release --generate-notes false --dry-run
  artifacts:
    paths:
    - VERSION.txt

generate-non-semantic-version:
  image: node:13
  stage: fetch-version
  except:
    refs:
    - master
    - alpha
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - echo build-$CI_PIPELINE_ID > VERSION.txt
  artifacts:
    paths:
    - VERSION.txt

build php7:
  stage: build
  image: docker:19.03.8
  services:
    - docker:19.03.8-dind
  variables:
    DOCKER_BUILDKIT: 1 
    IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/php7:$CI_COMMIT_SHA
  script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username=gitlab-ci-token --password-stdin
    - docker build --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $IMAGE_TAG -f docker/php7/Dockerfile docker/php7
    - docker push $IMAGE_TAG

build mysql:
  stage: build
  image: docker:19.03.8
  services:
    - docker:19.03.8-dind
  variables:
    DOCKER_BUILDKIT: 1 
    IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/mysql:$CI_COMMIT_SHA
  script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username=gitlab-ci-token --password-stdin
    - docker build --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $IMAGE_TAG -f docker/mysql/Dockerfile docker/mysql
    - docker push $IMAGE_TAG

# test shopware:
#   stage: test
#   image: docker/compose
#   variables:
#     TRAEFIK_DOMAIN: traefik.127.0.0.1.xip.io
#     APP_DOMAINS: shopware.127.0.0.1.xip.io
#   services:
#     - docker:19.03.8-dind
#   script:
#     - apk add curl
#     - docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
#     - echo "Waiting for Shopware to come up"
#     - until $(curl --output /dev/null --silent --head --fail http://localhost:8080); do printf '.'; sleep 5; done
#     - docker ps -a
#     - docker-compose -f docker-compose.yml -f docker-compose.dev.yml logs --tail 200
#   allow_failure: true

publish php7:
  stage: release
  image: docker:19.03.8
  services:
    - docker:19.03.8-dind
  script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username=gitlab-ci-token --password-stdin
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/php7:$CI_COMMIT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/php7:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/php7:latest
    - docker push $CI_REGISTRY_IMAGE/php7:latest
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/php7:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/php7:v$(cat VERSION.txt)
    - docker push $CI_REGISTRY_IMAGE/php7:v$(cat VERSION.txt)
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success

publish mysql:
  stage: release
  image: docker:19.03.8
  services:
    - docker:19.03.8-dind
  script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username=gitlab-ci-token --password-stdin
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/mysql:$CI_COMMIT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/mysql:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/mysql:latest
    - docker push $CI_REGISTRY_IMAGE/mysql:latest
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/mysql:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/mysql:v$(cat VERSION.txt)
    - docker push $CI_REGISTRY_IMAGE/mysql:v$(cat VERSION.txt)
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success

release:
  image: node:13
  stage: release
  only:
    refs:
    - master
    - alpha
    # This matches maintenance branches
    - /^(([0-9]+)\.)?([0-9]+)\.x/
    # This matches pre-releases
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ 
  script:
    - touch CHANGELOG.md
    - make install-deps
    - make release
  artifacts:
    paths:
    - CHANGELOG.md